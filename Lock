#!/usr/bin/python3

import Crypto.Cipher.AES as AES
import Crypto.Cipher.ARC2 as RC2
import Crypto.Cipher.Blowfish as Blowfish
import Crypto.Cipher.DES3 as DES3
import Crypto.Hash.SHA256 as SHA256

import string, random, os, time, zipfile

from tkinter import *
from tkinter.ttk import Progressbar


def padKey(key):

    """
        pad key to get key
        of length 16
    """

    # if key length is 16, return it
    if len(key) == 16 : return key.encode("utf-8")

    # use key as seed value and generate characters to pad key
    random.seed(key)
    padding = [random.choice(string.printable) for i in range( 16 - len(key))]

    # return byte-array of key
    return (key + "".join(padding)).encode("utf-8")


def traverseDirectories(pathList):

    """
        Generator to iterate through all selected files
        and all subfolders in a directory

        also update the progress bar
    """

    # get progress bar increment step size
    stepSize = (1 / len(pathList)) * 100
    currentProgressValue = 0

    for eachPath in pathList:

        # display name of file / folder currently being encrypted
        progressTitle.config(text = "Encrypting " + os.path.relpath(eachPath)[:10] + "...")
        progressTitle.update()

        # if the path is a directory, get list of all sub files
        if os.path.isdir(eachPath):
            for dirPath, dirList, files in os.walk(eachPath):
                for each in files:
                    yield os.path.join(dirPath, each)
        else:
            yield eachPath

        # after current file is encrypted, increment progress bar
        currentProgressValue += stepSize
        progressBar.config(value = currentProgressValue)
        progressBar.update()


def generateFileName(filePath, fileExtension):

    if not os.path.exists(filePath + fileExtension) :
        return filePath + fileExtension

    counter = 1
    while( os.path.exists( "{} ({}){}".format(filePath, counter, fileExtension)) ):
        counter += 1

    return "{} ({}){}".format(filePath, counter, fileExtension)


def getEncrypter(key):

    encryptionType = selectedEncryptionMethod.get()

    if encryptionType == 1:
        return AES.new(key, AES.MODE_CFB, 16 * "\x00")
    elif encryptionType == 2:
        return RC2.new(key, RC2.MODE_CFB, 8 * "\x00")
    elif encryptionType == 3:
        return Blowfish.new(key, Blowfish.MODE_CFB, 8 * "\x00")
    elif encryptionType == 4:
        return DES3.new(key, DES3.MODE_CFB, 8 * "\x00")


def encrypt(filePathList, key):

    if len(filePathList) == 0 :
        return

    # get parent directory
    encryptedFileDirectory = os.path.dirname(filePathList[0])

    # if only 1 file is being encrypted, the encrypted file name
    # is same as the selected file, else encrypted file
    # name is "Encrypted TIME_STAMP.sdk"
    if len(filePathList) == 1 :
        encryptedFileName = os.path.basename(filePathList[0])
    else:
        encryptedFileName = "Encrypted " + time.ctime()

    # combine fileName and parent path
    encryptedFilePath = generateFileName(os.path.join(encryptedFileDirectory, encryptedFileName), ".sdk")

    # create encrypted file (zip) to store all encrypted files
    # and key.encr file
    with zipfile.ZipFile(os.path.relpath(encryptedFilePath), "w") as zipFile:

        # create key.encr file
        with zipFile.open("key.encr", "w") as keyFile:
            keyFile.write(SHA256.new(key).digest())
            keyFile.write(SHA256.new(str(selectedEncryptionMethod.get()).encode("utf-8")).digest())

        # encrypt all files
        for eachFilePath in traverseDirectories(filePathList):

            encrypter = getEncrypter(key)

            with open(eachFilePath, "rb") as inputFile:

                # get file extension from file name
                # file extension is stored in the first line in
                # the encrypted file. Used to know file type on decryption
                fileExtension = os.path.splitext(eachFilePath)[1]

                # create encrypted file
                with zipFile.open(os.path.relpath(eachFilePath) + ".enr", "w") as outputFile:
                    outputFile.write((fileExtension + "\n").encode("utf-8"))
                    outputFile.write(encrypter.encrypt(inputFile.read()))


    # after encrypting is completed
    # change progress title and show name of encrypted file
    progressTitle.config(text = "Encrypted!!", anchor = "center")
    progressTitle.update()
    endMessage.config(text = "File saved as : \"{0}\"".format(os.path.relpath(encryptedFilePath)) )
    endMessage.pack(side = TOP, fill = X, expand = True, pady = 20, padx = 10)


def validate():

    """
        This method is called when
        ENCRYPT button is pressed
    """

    # hide error frame
    errorLabel.pack_forget()

    # get input from Entry
    key = keyInput.get()

    # key / password show have 8 - 16 characters
    if len(key) < 8 or len(key) > 16 :
        errorLabel.config(text = "Password has to be 8 - 16 characters long")
        errorLabel.pack(fill = BOTH, side = TOP, padx = 5, pady = 20)
        return

    # if key is valid:
    # disable keyInput and Encryption button
    # and show progress frame
    keyEntry.config(state = DISABLED)
    encryptButton.config(state = DISABLED)
    progressFrame.pack(side = TOP, fill = BOTH, expand = True, padx = 10, pady = 10)
    progressFrame.update()

    key = padKey(key)
    encrypt(filePathList, key)


def toggleAdvanceControls():

    if advanceControlButton['text'] == "\u22ce Show Advance Controls":
        advanceControlButton.config(text = "\u22cf Hide Advance Controls")
        encryptionOptionFrame.pack(side = TOP, fill = X, expand = True, padx = 10, pady = 10)

    else:
        advanceControlButton.config(text = "\u22ce Show Advance Controls")
        encryptionOptionFrame.pack_forget()


# get path of selected files
filePathList = os.environ["NAUTILUS_SCRIPT_SELECTED_FILE_PATHS"].split("\n")
filePathList.pop()   # remove empty entry

window = Tk()
window.minsize(300, 300)
window.title("Lock - Encrypt")


### Heading

headingLabelText = StringVar()
headingLabelText.set("Files to be encrypted : ")
headingLabel = Label(window, textvariable = headingLabelText)
headingLabel.pack(side = TOP, pady = 10)


### Selected Files

selectedFileFrame = Frame(window)
selectedFileFrame.pack(side = TOP, fill = X)

fileScrollBarY = Scrollbar(selectedFileFrame, orient = VERTICAL)
fileScrollBarY.pack(side = RIGHT, fill = Y)
fileScrollBarX = Scrollbar(selectedFileFrame, orient = HORIZONTAL)
fileScrollBarX.pack(side = BOTTOM, fill = X)

fileList = Listbox(selectedFileFrame, yscrollcommand = fileScrollBarY.set, xscrollcommand = fileScrollBarX.set)
for eachFile in filePathList:
    fileList.insert(END, os.path.relpath(eachFile))

fileList.pack(side = LEFT, expand = True, fill = X)
fileScrollBarY.config(command = fileList.yview)
fileScrollBarX.config(command = fileList.xview)


### key input

keyInputFrame = Frame(window)
keyInputFrame.pack(side = TOP, padx = 10, pady = 10)

keyLabelText = StringVar()
keyLabelText.set("Password ")
keyLabel = Label(keyInputFrame, textvariable = keyLabelText)
keyLabel.pack(side = LEFT)

keyInput = StringVar()
keyEntry = Entry(keyInputFrame, exportselection = False, textvariable = keyInput, show = "*", width = 18)
keyEntry.pack(side = LEFT)


### Encrypt Button

encryptButton = Button(window, text = "Encrypt", command = validate)
encryptButton.pack(side = TOP, pady = 10)


### Advance Controls Frame

advanceControlFrame = Frame(window)
advanceControlFrame.pack(side = TOP, fill = X, expand = True)

advanceControlButton = Button(advanceControlFrame, text = "\u22ce Show Advance Controls", font = ("arial", 9, "bold"), relief = FLAT, command = toggleAdvanceControls)
advanceControlButton.pack(side = TOP, fill = X, expand = True)

encryptionOptionFrame = LabelFrame(advanceControlFrame, text = " Encryption Algorithm ", font = ("arial", 9, "italic"))

selectedEncryptionMethod = IntVar()
selectedEncryptionMethod.set(1)
aesRadioButton = Radiobutton(encryptionOptionFrame, text = "AES", value = 1, variable = selectedEncryptionMethod, anchor = 'w')
aesRadioButton.pack(side = TOP, fill = X, expand = True)
rc2RadioButton = Radiobutton(encryptionOptionFrame, text = "RC2", value = 2, variable = selectedEncryptionMethod, anchor = 'w')
rc2RadioButton.pack(side = TOP, fill = X, expand = True)
blowfishRadioButton = Radiobutton(encryptionOptionFrame, text = "Blowfish", variable = selectedEncryptionMethod, value = 3, anchor = 'w')
blowfishRadioButton.pack(side = TOP, fill = X, expand = True)
des3RadioButton = Radiobutton(encryptionOptionFrame, text = "Triple DES", variable = selectedEncryptionMethod, value = 4, anchor = 'w')
des3RadioButton.pack(side = TOP, fill = X, expand = True)


### Error Label

errorLabel = Label(window, fg = "RED", text = "This is Error", font = ('Arial', 12), wraplength = 200)


### Progress frame

progressFrame = Frame(window)
progressTitle = Label(progressFrame, anchor = 'w', wraplength = 200)
progressTitle.pack(side = TOP, fill = X, expand = True, padx = 10)
progressBar = Progressbar(progressFrame, orient = HORIZONTAL)
progressBar.pack(side = TOP, fill = BOTH, expand = True, padx = 10, pady = 10)


### End message

endMessage = Label(window, wraplength = 200)


window.mainloop()
