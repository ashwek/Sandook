#!/usr/bin/python3

import Crypto.Cipher.AES as AES
import Crypto.Hash.SHA256 as SHA256
import string, random, os, time, mimetypes, zipfile, sys

def padKey(key):

    if len(key) == 16 : return key.encode("utf-8")

    random.seed(key)
    padding = [random.choice(string.printable) for i in range( 16 - len(key))]

    return (key + "".join(padding)).encode("utf-8")

def traverseDirectories(pathList):

    for eachPath in pathList:

        if os.path.isdir(eachPath):
            for dirPath, dirList, files in os.walk(eachPath):
                for each in files:
                    yield os.path.join(dirPath, each)
        else:
            yield eachPath

def encrypt(filePathList, key):

    if len(filePathList) == 0 :
        return

    encryptedFileDirectory = os.path.dirname(filePathList[0])

    if len(filePathList) == 1 :
        encryptedFileName = os.path.basename(filePathList[0])
    else:
        encryptedFileName = "Encrypted " + time.ctime()

    encryptedFilePath = os.path.join(encryptedFileDirectory, encryptedFileName + ".sdk")

    with zipfile.ZipFile(os.path.relpath(encryptedFilePath), "w") as zipFile:

        with zipFile.open("key.encr", "w") as keyFile:
            keyFile.write(SHA256.new(key).digest())

        for eachFilePath in traverseDirectories(filePathList):

            encrypter = AES.new(key, AES.MODE_CFB, 16 * "\x00")

            with open(eachFilePath, "rb") as inputFile:

                fileExtension = os.path.splitext(eachFilePath)[1]

                with zipFile.open(os.path.relpath(eachFilePath) + ".enr", "w") as outputFile:
                    outputFile.write((fileExtension + "\n").encode("utf-8"))
                    outputFile.write(encrypter.encrypt(inputFile.read()))

    print("Successfully encrypted file")


def decrypt(filePathList, key):

    if len(filePathList) > 1 :
        print("Cannot Decrypt Multiple Files")
        return

    filePath = filePathList[0]

    if os.path.isdir(filePath) :
        print("Cannot decrypt directory")
        return

    decryptedFileName = os.path.splitext(os.path.basename(filePath))[0]

    decryptedFilePath = os.path.join(os.path.dirname(filePath), decryptedFileName)
    os.mkdir(decryptedFilePath)

    with zipfile.ZipFile(filePath, "r") as encrFile:

        if( "key.encr" not in encrFile.namelist() ):
            print("Cannot decrypt File")
            return

        with encrFile.open("key.encr", "r") as keyFile:
            if SHA256.new(key).digest() != keyFile.read() :
                print("Incorrect Key")
                return

        fileList = encrFile.infolist()

        for eachFile in fileList:

            if eachFile.is_dir():
                os.mkdir(os.path.join(decryptedFilePath, eachFile.filename))
                continue

            if eachFile.filename == "key.encr" :
                continue

            with encrFile.open(eachFile.filename, "r") as inputFile:

                decrypter = AES.new(key, AES.MODE_CFB, 16 * "\x00")

                if not os.path.exists(os.path.dirname(os.path.join(decryptedFilePath, eachFile.filename))):
                    os.makedirs(os.path.dirname(os.path.join(decryptedFilePath, eachFile.filename)))

                with open(os.path.join(decryptedFilePath, eachFile.filename), "wb") as outputFile:

                    newFileExtension = inputFile.readline().decode("utf-8").rstrip("\n")
                    outputFile.write(decrypter.decrypt(inputFile.read()))

                newFileName = os.path.splitext(eachFile.filename)[0]
                if not newFileName.endswith(newFileExtension):
                    newFileName += newFileExtension

                os.rename(os.path.join(decryptedFilePath, eachFile.filename), os.path.join(decryptedFilePath, newFileName))

    print("Successfully decrypted file")

def takeInput():

    while True :
        filePath = input("Enter file path : ")
        if os.path.exists(filePath): break
        print("*** Invalid File Path ***")

    print()

    while True :
        key = input("Enter 8 - 16 len key : ")
        if 8 <= len(key) <= 16 : break
        print("*** Invalid key, key should be 8 / 16 characters long ***")
    key = padKey(key)

    return filePath, key

while True:

    print("1. Encrypt")
    print("2. Decrypt")
    print("3. Exit")
    choice = input("Enter your choice : ")

    try:
        choice = int(choice)
        if choice == 1 :
            filePath = ["../path1/..", "../path2/.."]
            key = padKey("key")
            encrypt(filePath, key)
        elif choice == 2 :
            filePath = ["../path/.."]
            key = padKey("key")
            decrypt(filePath, key)
        elif choice == 3 :
            break
        else:
            raise ValueError()
    except ValueError: print("\n** Invalid Choice **\n", sys.exc_info())
